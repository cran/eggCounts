// Generated by rstantools.  Do not edit by hand.

/*
    This file is part of rstanarm.
    Copyright (C) 2015, 2016 Trustees of Columbia University
    
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_unpaired_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 35> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 10, column 2 to column 22)",
  " (in 'string', line 11, column 2 to column 19)",
  " (in 'string', line 12, column 2 to column 30)",
  " (in 'string', line 13, column 2 to column 30)",
  " (in 'string', line 14, column 2 to column 30)",
  " (in 'string', line 17, column 2 to column 25)",
  " (in 'string', line 18, column 2 to column 25)",
  " (in 'string', line 20, column 4 to column 32)",
  " (in 'string', line 19, column 17 to line 21, column 3)",
  " (in 'string', line 19, column 2 to line 21, column 3)",
  " (in 'string', line 23, column 4 to column 39)",
  " (in 'string', line 22, column 17 to line 24, column 3)",
  " (in 'string', line 22, column 2 to line 24, column 3)",
  " (in 'string', line 27, column 2 to column 22)",
  " (in 'string', line 28, column 2 to column 23)",
  " (in 'string', line 29, column 2 to column 20)",
  " (in 'string', line 30, column 2 to column 31)",
  " (in 'string', line 31, column 2 to column 31)",
  " (in 'string', line 32, column 2 to column 31)",
  " (in 'string', line 33, column 2 to column 31)",
  " (in 'string', line 2, column 2 to column 9)",
  " (in 'string', line 3, column 2 to column 9)",
  " (in 'string', line 4, column 8 to column 10)",
  " (in 'string', line 4, column 2 to column 26)",
  " (in 'string', line 5, column 8 to column 10)",
  " (in 'string', line 5, column 2 to column 26)",
  " (in 'string', line 6, column 8 to column 10)",
  " (in 'string', line 6, column 2 to column 23)",
  " (in 'string', line 7, column 8 to column 10)",
  " (in 'string', line 7, column 2 to column 22)",
  " (in 'string', line 13, column 8 to column 10)",
  " (in 'string', line 14, column 8 to column 10)",
  " (in 'string', line 17, column 8 to column 10)",
  " (in 'string', line 18, column 8 to column 10)"};
#include <stan_meta_header.hpp>
class model_unpaired final : public model_base_crtp<model_unpaired> {
private:
  int Ja;
  int Jb;
  std::vector<int> ystararaw;
  std::vector<int> ystarbraw;
  std::vector<double> fpost;
  std::vector<double> fpre;
public:
  ~model_unpaired() {}
  model_unpaired(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_unpaired_namespace::model_unpaired";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization", "Ja", "int",
        std::vector<size_t>{});
      Ja = std::numeric_limits<int>::min();
      current_statement__ = 21;
      Ja = context__.vals_i("Ja")[(1 - 1)];
      current_statement__ = 22;
      context__.validate_dims("data initialization", "Jb", "int",
        std::vector<size_t>{});
      Jb = std::numeric_limits<int>::min();
      current_statement__ = 22;
      Jb = context__.vals_i("Jb")[(1 - 1)];
      current_statement__ = 23;
      stan::math::validate_non_negative_index("ystararaw", "Ja", Ja);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "ystararaw", "int",
        std::vector<size_t>{static_cast<size_t>(Ja)});
      ystararaw = std::vector<int>(Ja, std::numeric_limits<int>::min());
      current_statement__ = 24;
      ystararaw = context__.vals_i("ystararaw");
      current_statement__ = 25;
      stan::math::validate_non_negative_index("ystarbraw", "Jb", Jb);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "ystarbraw", "int",
        std::vector<size_t>{static_cast<size_t>(Jb)});
      ystarbraw = std::vector<int>(Jb, std::numeric_limits<int>::min());
      current_statement__ = 26;
      ystarbraw = context__.vals_i("ystarbraw");
      current_statement__ = 27;
      stan::math::validate_non_negative_index("fpost", "Ja", Ja);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "fpost", "double",
        std::vector<size_t>{static_cast<size_t>(Ja)});
      fpost = std::vector<double>(Ja,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      fpost = context__.vals_r("fpost");
      current_statement__ = 29;
      stan::math::validate_non_negative_index("fpre", "Jb", Jb);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "fpre", "double",
        std::vector<size_t>{static_cast<size_t>(Jb)});
      fpre = std::vector<double>(Jb,
               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 30;
      fpre = context__.vals_r("fpre");
      current_statement__ = 31;
      stan::math::validate_non_negative_index("mub", "Jb", Jb);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("mua", "Ja", Ja);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("lambdaa", "Ja", Ja);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("lambdab", "Jb", Jb);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + Jb + Ja;
  }
  inline std::string model_name() const final {
    return "model_unpaired";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_unpaired_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ kappa = DUMMY_VAR__;
      current_statement__ = 1;
      kappa = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 2;
      mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 3;
      delta = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      std::vector<local_scalar_t__> mub =
        std::vector<local_scalar_t__>(Jb, DUMMY_VAR__);
      current_statement__ = 4;
      mub = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, Jb);
      std::vector<local_scalar_t__> mua =
        std::vector<local_scalar_t__>(Ja, DUMMY_VAR__);
      current_statement__ = 5;
      mua = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, Ja);
      std::vector<local_scalar_t__> lambdaa =
        std::vector<local_scalar_t__>(Ja, DUMMY_VAR__);
      std::vector<local_scalar_t__> lambdab =
        std::vector<local_scalar_t__>(Jb, DUMMY_VAR__);
      current_statement__ = 10;
      for (int i = 1; i <= Jb; ++i) {
        current_statement__ = 8;
        stan::model::assign(lambdab,
          (stan::model::rvalue(mub, "mub", stan::model::index_uni(i)) /
          stan::model::rvalue(fpre, "fpre", stan::model::index_uni(i))),
          "assigning variable lambdab", stan::model::index_uni(i));
      }
      current_statement__ = 13;
      for (int i = 1; i <= Ja; ++i) {
        current_statement__ = 11;
        stan::model::assign(lambdaa, ((delta *
          stan::model::rvalue(mua, "mua", stan::model::index_uni(i))) /
          stan::model::rvalue(fpost, "fpost", stan::model::index_uni(i))),
          "assigning variable lambdaa", stan::model::index_uni(i));
      }
      {
        current_statement__ = 14;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(mu, 1, 0.001));
        current_statement__ = 15;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(kappa, 1, 0.7));
        current_statement__ = 16;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(delta, 1, 1));
        current_statement__ = 17;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(mub, kappa, (kappa /
                         mu)));
        current_statement__ = 18;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(mua, kappa, (kappa /
                         mu)));
        current_statement__ = 19;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(ystarbraw, lambdab));
        current_statement__ = 20;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(ystararaw, lambdaa));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_unpaired_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double kappa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      kappa = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      delta = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      std::vector<double> mub =
        std::vector<double>(Jb, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      mub = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, Jb);
      std::vector<double> mua =
        std::vector<double>(Ja, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      mua = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, Ja);
      std::vector<double> lambdaa =
        std::vector<double>(Ja, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> lambdab =
        std::vector<double>(Jb, std::numeric_limits<double>::quiet_NaN());
      out__.write(kappa);
      out__.write(mu);
      out__.write(delta);
      out__.write(mub);
      out__.write(mua);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      for (int i = 1; i <= Jb; ++i) {
        current_statement__ = 8;
        stan::model::assign(lambdab,
          (stan::model::rvalue(mub, "mub", stan::model::index_uni(i)) /
          stan::model::rvalue(fpre, "fpre", stan::model::index_uni(i))),
          "assigning variable lambdab", stan::model::index_uni(i));
      }
      current_statement__ = 13;
      for (int i = 1; i <= Ja; ++i) {
        current_statement__ = 11;
        stan::model::assign(lambdaa, ((delta *
          stan::model::rvalue(mua, "mua", stan::model::index_uni(i))) /
          stan::model::rvalue(fpost, "fpost", stan::model::index_uni(i))),
          "assigning variable lambdaa", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(lambdaa);
        out__.write(lambdab);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ kappa = DUMMY_VAR__;
      current_statement__ = 1;
      kappa = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, kappa);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 2;
      mu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, mu);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 3;
      delta = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, delta);
      std::vector<local_scalar_t__> mub =
        std::vector<local_scalar_t__>(Jb, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(mub, in__.read<std::vector<local_scalar_t__>>(Jb),
        "assigning variable mub");
      out__.write_free_lb(0, mub);
      std::vector<local_scalar_t__> mua =
        std::vector<local_scalar_t__>(Ja, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(mua, in__.read<std::vector<local_scalar_t__>>(Ja),
        "assigning variable mua");
      out__.write_free_lb(0, mua);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "kappa", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "mub", "double",
        std::vector<size_t>{static_cast<size_t>(Jb)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mua", "double",
        std::vector<size_t>{static_cast<size_t>(Ja)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ kappa = DUMMY_VAR__;
      current_statement__ = 1;
      kappa = context__.vals_r("kappa")[(1 - 1)];
      out__.write_free_lb(0, kappa);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 2;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write_free_lb(0, mu);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 3;
      delta = context__.vals_r("delta")[(1 - 1)];
      out__.write_free_lub(0, 1, delta);
      std::vector<local_scalar_t__> mub =
        std::vector<local_scalar_t__>(Jb, DUMMY_VAR__);
      current_statement__ = 4;
      mub = context__.vals_r("mub");
      out__.write_free_lb(0, mub);
      std::vector<local_scalar_t__> mua =
        std::vector<local_scalar_t__>(Ja, DUMMY_VAR__);
      current_statement__ = 5;
      mua = context__.vals_r("mua");
      out__.write_free_lb(0, mua);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"kappa", "mu", "delta", "mub", "mua"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"lambdaa", "lambdab"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(Jb)},
                std::vector<size_t>{static_cast<size_t>(Ja)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(Ja)},
             std::vector<size_t>{static_cast<size_t>(Jb)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "delta");
    for (int sym1__ = 1; sym1__ <= Jb; ++sym1__) {
      param_names__.emplace_back(std::string() + "mub" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Ja; ++sym1__) {
      param_names__.emplace_back(std::string() + "mua" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Ja; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambdaa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Jb; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambdab" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "delta");
    for (int sym1__ = 1; sym1__ <= Jb; ++sym1__) {
      param_names__.emplace_back(std::string() + "mub" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Ja; ++sym1__) {
      param_names__.emplace_back(std::string() + "mua" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Ja; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambdaa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Jb; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambdab" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Jb) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mua\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Ja) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambdaa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Ja) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lambdab\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Jb) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Jb) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mua\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Ja) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambdaa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Ja) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lambdab\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Jb) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + Jb) + Ja);
    const size_t num_transformed = emit_transformed_parameters * ((Ja + Jb));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + Jb) + Ja);
    const size_t num_transformed = emit_transformed_parameters * ((Ja + Jb));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_unpaired_namespace::model_unpaired;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_unpaired_namespace::profiles__;
}
#endif
#endif
